#pragma once

// Built-in library inclusions
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

/////// SDK HEADER CONTENT ///////
// General purpose TI Drivesrs
#include <ti/drivers/Power.h>
#include <ti/drivers/GPIO.h>
#include <ti/drivers/SPI.h>
#include <ti/drivers/SDFatFS.h>
#include <ti/drivers/Temperature.h>

// TI-RTOS7 BIOS execution
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>

// TI driver and sysbios configuration - files generated by "main.sysconfig" & must be included.
#include "ti_drivers_config.h"
#include "ti_sysbios_config.h"

/////// CUSTOM HEADER CONTENT ///////
// Custom startup config - might not need, sysconfig should init pins correctly.
#include "../config/config_functions.h"
#include "../tasks/microSD_write_task/microSD_write_task.h"
#include "../tasks/test_gpio_task/test_gpio_task.h"
#include "../tasks/power_shutdown_task/power_shutdown_task.h"
#include "../tasks/temperature_monitoring_task/temperature_monitoring_task.h"

// Custom Macros
// GPIO
#define DRIVE_GPIO_HIGH (1)
#define DRIVE_GPIO_LOW (0)
#define GPIO_SET_OUT_AND_DRIVE_LOW (GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW)
#define GPIO_SET_OUT_AND_DRIVE_HIGH (GPIO_CFG_OUT_STD | GPIO_CFG_OUT_HIGH)
// Clock_tickPeriod = 10 us --- i.e. 25,000 Ticks = 250 ms --- The macros below convert common time units into ticks to use in delay routines.
#define SECONDS_TO_TICKS(seconds) ((seconds) * 100000)                      
#define MS_TO_TICKS(milliseconds) ((milliseconds) * 100)
#define US_TO_TICKS(microseconds) ((microseconds) * 10)
// Default task sleep duration in ticks
#define DEFAULT_TASK_SLEEP_DURATION (MS_TO_TICKS(250))
#define TEMP_MONITORING_TASK_SLEEP_DURATION (MS_TO_TICKS(250))
// Temperature monitoring
#define HIGH_TEMP_THRESHOLD_CELSIUS 35
#define CRITICAL_TEMP_THRESHOLD_CELSIUS 40
#define HIGH_TEMP_TASK_SLEEP_DURATION (MS_TO_TICKS(1000))
#define CRITICAL_TEMP_TASK_SLEEP_DURATION (MS_TO_TICKS(5000))

// Global variables
extern int g_taskSleepDuration;

// Custom Function Prototypes
////////// DOC STRING TEMPLATE //////////
/**
* @brief - Short description goes here.
*
* Long description goes here (optional).
*
* @param a - First param (optional).
* @param b - Second param (optional).
* @return  - What is returned goes here (optional).
*/
/////////////////////////////////////////

/**
* @brief Creates and initializes all tasks and other RTOS resources required for the application.
*
* This function is responsible for creating all the tasks necessary 
* for the application, initializing associated semaphores, and 
* configuring interrupts. It sets up the power task and any other 
* tasks that toggle GPIOs or perform other specific functionalities.
* Each task is created with its respective stack and priority.
* 
* @note This function assumes that all task stacks and structures 
*       are properly defined globally and available for use.
*/
void createAllResources();

/**
* @brief - Test code that toggles a GPIO pin every 1 second.
*
* The function sets a single GPIO pin to output and toggles it
* with a one second delay. This is used for testing the functionality of
* a digital output pin only and should not be used in the final project. 
* The input parameter is chosen based off of the gpioPinConfigs
* list inside ti_drivers_config.c.
*
* @param pin_config_index - The index of the GPIO pin to be tested. Valid inputs = 5-30
*/
void testGpio(uint32_t pin_config_index);

/**
* @brief Print the value of a variable of various types to the CIO with an optional name.
*
* This function prints the value of a variable based on its type.
* Supported types include integer, float, character, and string.
* The function uses a `void*` pointer to handle different types dynamically.
* Additionally, the variable name can be provided for descriptive output; if
* no name is provided (`varName` is `NULL`), a default name ("Unnamed Variable") is used.
*
* @param varName - Optional name of the variable to print. Pass `NULL` to use the default name.
* @param var - Pointer to the variable to be printed. The actual type of the variable
*              must match the specified type parameter (`type`).
* @param type - A character specifying the type of the variable:
*               - 'd' for integers
*               - 'f' for floats
*               - 'c' for characters
*               - 's' for strings
*               - 'u' for unsigned int
*               - 'U' for unisgned int 32
*               - 'i' for fast int 16
*
* @note Ensure the correct type is passed to avoid undefined behavior.
*       For example, if the type is 'd', ensure `var` points to an integer.
* 
* @example Example usage:
*          int num = 42;
*          printVar("num", &num, 'd');       // Prints: Variable "num" value: 42
*          printVar(NULL, &num, 'd');        // Prints: Variable "foo" value: 42
*/
void printVar(const char *varName, void *var, char type);


/**
* @brief Print a string to the CIO.
*
* @param str - Pointer to a string that will be printed to CIO.
* 
* @example Example usage:
*          printStr("Printed String");
*/
void printStr(const char *str);