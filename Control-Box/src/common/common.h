#pragma once

// Built-in library inclusions
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <stdint.h>

/////// SDK HEADER CONTENT ///////
/* 
*  Any header locations  that are included throughout the project will be added to the build definitions 
*  inside the .cproject file. These file paths tell the compiler where to search for headers that are
*  from the SDK. This allows us to include just a filename.h instead of an absolute path for files that
*  are outside the project structure but must be included. If a header is used more than once throughout
*  the SDK & a conflicting file path is already included just use an absolute path.
*/
// General purpose TI Drivesrs
#include <Power.h>
#include <GPIO.h>
#include <SPI.h>
#include <SDFatFS.h>
#include <Temperature.h>

#include <TRNG.h>
#include <AESCTRDRBG.h>
#include <AESCCM.h>
#include <AESECB.h>
#include <ECDH.h>

#include <inc/hw_memmap.h>
#include <driverlib/vims.h>

// TI-RTOS7 BIOS execution
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Event.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/gates/GateMutexPri.h>


// TI driver and sysbios configuration - files generated by "main.sysconfig" & must be included. --- The can likely be removed
// since they are in generated files usually.
#include "ti_drivers_config.h"
#include "ti_sysbios_config.h"
#include "ti_ble_config.h"

/////// CUSTOM HEADER CONTENT ///////
// CUSTOM MACROS
// Task Priorities
// The max priority that can be used is currently 6 --- A priority of 0 is reserved for the idleLoop() and should not be used here.
// This can be changed in main.sysconfig -> POSIX Settings -> Other Dependencies -> Task -> # of task priorities.
// The number of task priorities setting in the .sysconfig includes 0, therefore if the set value is 7, then the range of usable priorities is 0 to 6.
#define POWER_SHUTDOWN_PRIORITY     1
#define MICROSD_WRITE_PRIORITY      2
#define DISPLAY_DRIVER_PRIORITY     3
#define BLE_CENTRAL_PRIORITY        4
#define TEST_GPIO_PRIORITY          5
#define RED_LIGHT_BLINK_PRIORITY    5       // Used for debugging
#define GREEN_LIGHT_BLINK_PRIORITY  5       // Used for debugging
#define TEMP_MONITORING_PRIORITY    6
// Task stack sizes in bytes --- NOTE: Must be a multiple of 8 bytes to maintain stack pointer alignment
#define POWER_SHUTDOWN_STACK_SIZE   512
#define MICROSD_WRITE_STACK_SIZE    1024
#define DISPLAY_DRIVER_STACK_SIZE   1024
#define BLE_CENTRAL_STACK_SIZE      1024
#define TEST_GPIO_STACK_SIZE        1024
#define TEMP_MONITORING_STACK_SIZE  1024
// GPIO
#define DRIVE_GPIO_HIGH             1
#define DRIVE_GPIO_LOW              0
#define GPIO_SET_OUT_AND_DRIVE_LOW  (GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW)
#define GPIO_SET_OUT_AND_DRIVE_HIGH (GPIO_CFG_OUT_STD | GPIO_CFG_OUT_HIGH)
#define SD_SPI_CSN_PIN              11
#define DISPLAY_SPI_CSN_PIN         12
// Clock timing
// Clock_tickPeriod = 10 us --- i.e. 25,000 Ticks = 250 ms --- The macros below convert common time units into ticks to use in delay routines.
#define SECONDS_TO_TICKS(seconds)           ((seconds) * 100000)                      
#define MS_TO_TICKS(milliseconds)           ((milliseconds) * 100)
#define US_TO_TICKS(microseconds)           ((microseconds) * 10)
#define DEFAULT_TASK_SLEEP_DURATION         (MS_TO_TICKS(250))
#define TEMP_MONITORING_TASK_SLEEP_DURATION (MS_TO_TICKS(250))
// Temperature monitoring
#define HIGH_TEMP_THRESHOLD_CELSIUS         35
#define CRITICAL_TEMP_THRESHOLD_CELSIUS     40
#define HIGH_TEMP_TASK_SLEEP_DURATION       (MS_TO_TICKS(1000))
#define CRITICAL_TEMP_TASK_SLEEP_DURATION   (MS_TO_TICKS(5000))
// Heart rate thresholds
#define LOW_HEART_RATE_THRESHOLD_BPM    80
#define HIGH_HEART_RATE_THRESHOLD_BPM   180
// Respiratory rate thresholds
#define LOW_RESPIRATORY_RATE_THRESHOLD_BRPM     20
#define HIGH_RESPIRATORY_RATE_THRESHOLD_BRPM    60
// Circular queue --- Used to buffer recieved data before output to Display & SD card
#define CIRCULAR_QUEUE_SIZE 1024

// TYPE DEFINITIONS
typedef struct {
    char buffer[CIRCULAR_QUEUE_SIZE];
    int head;  // Points to the start of valid data
    int tail;  // Points to the next available space
    int size;  // Current size of valid data
} CircularQueue;

// GLOBAL VARIABLES --- exetern is used here to declare variables globably, however, they are defined in "common.c". This allows them to be accessible anywhere in project.
extern int g_taskSleepDuration;
extern CircularQueue sdMemQueue;
extern CircularQueue displayMemQueue;

// CUSTOM INCLUSIONS
#include "config_functions.h"
#include "microSD_write_task.h"
#include "test_gpio_task.h"
#include "power_shutdown_task.h"
#include "temperature_monitoring_task.h"
#include "display_driver_task.h"
#include "ble_central_task.h"
#include "simple_central/application/simple_central.h"


// CUSTOM FUNCTION PROTOTYPES
////////// DOC STRING TEMPLATE //////////
/**
* @brief - Short description goes here.
*
* Long description goes here (optional).
*
* @param a - First param (optional).
* @param b - Second param (optional).
* @return  - What is returned goes here (optional).
*/
/////////////////////////////////////////

/**
 * @brief Logs formatted data to the circular queue.
 *
 * Constructs a formatted log entry containing heart rate, respiratory rate, and timestamp.
 * The formatted string is then added to the circular queue for both the SD card and display screen.
 *
 * @param heartRate The heart rate value to log.
 * @param respiratoryRate The respiratory rate value to log.
 * @param timestamp A string containing the timestamp of the log entry.
 */
void logData(int heartRate, int respiratoryRate, const char* timestamp);

/**
 * @brief Appends data to the circular queue.
 *
 * Stores the provided data in the circular queue for later writing to the SD card.
 * If the queue is full, a warning message is printed, and the data is not stored.
 *
 * @param data Pointer to the null-terminated string to be added to the queue.
 */
void appendToSdAndDisplayQueue(const char *data);

/**
* @brief - Test code that toggles a GPIO pin every 1 second.
*
* The function sets a single GPIO pin to output and toggles it
* with a one second delay. This is used for testing the functionality of
* a digital output pin only and should not be used in the final project. 
* The input parameter is chosen based off of the gpioPinConfigs
* list inside ti_drivers_config.c.
*
* @param pin_config_index - The index of the GPIO pin to be tested. Valid inputs = 5-30
*/
void testGpio(uint32_t pin_config_index);


/*******************************************************************************
 * @fn          AssertHandler --- FROM EXAMPLE
 *
 * @brief       This is the Application's callback handler for asserts raised
 *              in the stack.  When EXT_HAL_ASSERT is defined in the Stack Wrapper
 *              project this function will be called when an assert is raised,
 *              and can be used to observe or trap a violation from expected
 *              behavior.
 *
 *              As an example, for Heap allocation failures the Stack will raise
 *              HAL_ASSERT_CAUSE_OUT_OF_MEMORY as the assertCause and
 *              HAL_ASSERT_SUBCAUSE_NONE as the assertSubcause.  An application
 *              developer could trap any malloc failure on the stack by calling
 *              HAL_ASSERT_SPINLOCK under the matching case.
 *
 *              An application developer is encouraged to extend this function
 *              for use by their own application.  To do this, add hal_assert.c
 *              to your project workspace, the path to hal_assert.h (this can
 *              be found on the stack side). Asserts are raised by including
 *              hal_assert.h and using macro HAL_ASSERT(cause) to raise an
 *              assert with argument assertCause.  the assertSubcause may be
 *              optionally set by macro HAL_ASSERT_SET_SUBCAUSE(subCause) prior
 *              to asserting the cause it describes. More information is
 *              available in hal_assert.h.
 *
 * input parameters
 *
 * @param       assertCause    - Assert cause as defined in hal_assert.h.
 * @param       assertSubcause - Optional assert subcause (see hal_assert.h).
 *
 * output parameters
 *
 * @param       None.
 *
 * @return      None.
 */
void AssertHandler(uint8 assertCause, uint8 assertSubcause);
